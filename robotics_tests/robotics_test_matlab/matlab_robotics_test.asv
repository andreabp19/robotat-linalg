

% @author Andrea Pineda
% 
% file for comparing with robotat_robotics functions

% list of operations to implement:
% rot matrix 2D and 3D
% homogeneous transformations 2D and 3D
% 2D pose
% 3D pose

% List of functions equivalent to those in robotat linalg
% rotx = rob_rotx
% roty = rob_roty
% rotz = rob_rotz
% transl = rob_transl
% homstrans = rob_apply_transform

% Some differences to note:
% transl creates a 4x4 matrix with the coordinates vector and a I matrix
% where the rotation matrix should go.
% On the other hand, rob_transl just assigns the coordinates vector to the
% 4x4 matrix T, which was created beforehand.
%
% rotx, roty and rotz work the same with their robotat_linalg equivalent,
% the only difference being that rob_rotx, rob_roty and rob_rotz also
% assign the rotation matrix to T instead of just generating it.
% 
% rob_ print functions have no equivalent because matlab makes it easy to
% print matrices and values. Print functions will not be measured for time,
% they work and that's it.
%
% work in progress will add more functions later :3

%% CLEAN EVERYTHING

clear
clc

%% MAIN

x = 100;    % Number of tests per operation

B_p = [randn(3,1); 1];    % Point (x,y,z,1) with reference to FRAME_B

v = randn(3,1);     % Coord. vector for the hom. transformation matrix

theta = 0.5;     % Angle in radians

file_labels = ["n","time(s)"];

% -------------------------------------------------------------------------
% DATA ARRAYS FOR EACH OPERATION TO TEST
% -------------------------------------------------------------------------

rotx_time = zeros(1,x);
rotx_stats = zeros(10,2);
rotx_mean_time = 0;

roty_time = zeros(1,x);
roty_stats = zeros(10,2);
roty_mean_time = 0;

rotz_time = zeros(1,x);
rotz_stats = zeros(10,2);
rotz_mean_time = 0;

transl_time = zeros(1,x);
transl_stats = zeros(10,2);
transl_mean_time = 0;

homtrans_time = zeros(1,x);
homtrans_stats = zeros(10,2);
homtrans_mean_time = 0;

xyx_time = zeros(1,x);
xyx_stats = zeros(10,2);
xyx_mean_time = 0;

% -------------------------------------------------------------------------
% PRINT DATA TO A .h TO USE AS INPUT DATA IN PLATFORMIO
% -------------------------------------------------------------------------

results_file = fopen('robotics_test_results.h','w');

fprintf(results_file, 'uint8_t x = %.9f;\n', x);
fprintf(results_file, 'float theta = %.9f;\n', theta);
fprintf(results_file, 'float F_AB_v_data[3] = {%.9f, %.9f, %.9f};\n', v(1), v(2), v(3));
fprintf(results_file, 'float p_B_data[4] = {%.9f, %.9f, %.9f, %.9f};\n', B_p(1), B_p(2), B_p(3), B_p(4));

% -------------------------------------------------------------------------
% FUNCTIONS TESTING
% -------------------------------------------------------------------------
% -------------------------------------------------------------------------
% 1. rotx
% -------------------------------------------------------------------------

for i = 1:1:x
    tic;
    rotx_result = rotx(theta);
    rotx_time(i) = toc;

    rotx_stats(i,1) = i;
    rotx_stats(i,2) = rotx_time(i);
end

rotx_mean_time = mean(rotx_stats(:,2));

% Print results to .h
fprintf(results_file, 'float R_rotx_data[9] = {');

temp_rotx = transpose(rotx_result);
for z = 1:1:9
    
    fprintf(results_file, '%.9f', temp_rotx(z));

    if (z < 9)
            fprintf(results_file, ',');
    end
end    

fprintf(results_file, '};\n');

% -------------------------------------------------------------------------
% 2. roty
% -------------------------------------------------------------------------

for i = 1:1:x
    tic;
    roty_result = roty(theta);
    roty_time(i) = toc;

    roty_stats(i,1) = i;
    roty_stats(i,2) = roty_time(i);
end

roty_mean_time = mean(roty_stats(:,2));

% Print results to .h
fprintf(results_file, 'float R_roty_data[9] = {');

temp_roty = transpose(roty_result);
for z = 1:1:9
    
    fprintf(results_file, '%.9f', temp_roty(z));

    if (z < 9)
            fprintf(results_file, ',');
    end
end    

fprintf(results_file, '};\n');

% -------------------------------------------------------------------------
% 3. rotz
% -------------------------------------------------------------------------

for i = 1:1:x
    tic;
    rotz_result = rotz(theta);
    rotz_time(i) = toc;

    rotz_stats(i,1) = i;
    rotz_stats(i,2) = rotz_time(i);
end

rotz_mean_time = mean(rotz_stats(:,2));

% Print results to .h
fprintf(results_file, 'float R_rotz_data[9] = {');

temp_rotz = transpose(rotz_result);
for z = 1:1:9
    
    fprintf(results_file, '%.9f', temp_rotz(z));

    if (z < 9)
            fprintf(results_file, ',');
    end
end    

fprintf(results_file, '};\n');

% -------------------------------------------------------------------------
% 4. transl
% -------------------------------------------------------------------------

for i = 1:1:x
    tic;
    transl_result = transl(v);
    transl_time(i) = toc;

    transl_stats(i,1) = i;
    transl_stats(i,2) = transl_time(i);
end

transl_mean_time = mean(transl_stats(:,2));

% Print results to .h
fprintf(results_file, 'float R_transl_data[16] = {');

temp_transl = transpose(transl_result);
for z = 1:1:16
    
    fprintf(results_file, '%.9f', temp_transl(z));

    if (z < 16)
            fprintf(results_file, ',');
    end
end    

fprintf(results_file, '};\n');

% -------------------------------------------------------------------------
% 5. homtrans
% -------------------------------------------------------------------------

for i = 1:1:x
    transl_result(1:3, 1:3) = rotx_result;
    tic;
    homtrans_result = homtrans(transl_result, B_p);
    homtrans_time(i) = toc;

    homtrans_stats(i,1) = i;
    homtrans_stats(i,2) = homtrans_time(i);
end

homtrans_mean_time = mean(homtrans_stats(:,2));

% Print results to .h
fprintf(results_file, 'float R_homtrans_data[4] = {');

temp_homtrans = transpose(homtrans_result);
for z = 1:1:4
    
    fprintf(results_file, '%.9f', temp_homtrans(z));

    if (z < 4)
            fprintf(results_file, ',');
    end
end    

fprintf(results_file, '};\n');

% -------------------------------------------------------------------------
% 6. XYX (no specific function for this, so manually and measure time
% -------------------------------------------------------------------------

for i = 1:1:x
    tic;
    transl_result(1:)
    homtrans_result = homstrans(transl_result, )
    xyx_time(i) = toc;

    xyx_stats(i,1) = i;
    xyx_stats(i,2) = xyx_time(i);
end

xyx_mean_time = mean(xyx_stats(:,2));

% Print results to .h
fprintf(results_file, 'float R_xyx_data[16] = {');

temp_xyx = transpose(xyx_result);
for z = 1:1:16
    
    fprintf(results_file, '%.9f', temp_xyx(z));

    if (z < 16)
            fprintf(results_file, ',');
    end
end    

fprintf(results_file, '};\n');

% -------------------------------------------------------------------------
% EXPORT STATS TO A .csv TO USE IN EXCEL
% -------------------------------------------------------------------------

% ROTX
writematrix("ROTX MEAN TIME", 'robotics_test_stats.csv');
writematrix(rotx_stats, 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix("", 'robotics_test_stats.csv', 'WriteMode', 'append');

% ROTY
writematrix("ROTY MEAN TIME", 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix(roty_stats, 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix("", 'robotics_test_stats.csv', 'WriteMode', 'append');

% ROTZ
writematrix("ROTZ MEAN TIME", 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix(rotz_stats, 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix("", 'robotics_test_stats.csv', 'WriteMode', 'append');

% TRANSL
writematrix("TRANSL MEAN TIME", 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix(transl_stats, 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix("", 'robotics_test_stats.csv', 'WriteMode', 'append');

% HOMTRANS
writematrix("HOMTRANS MEAN TIME", 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix(homtrans_stats, 'robotics_test_stats.csv', 'WriteMode', 'append');
writematrix("", 'robotics_test_stats.csv', 'WriteMode', 'append');